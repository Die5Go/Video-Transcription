import os
import google.generativeai as genai

def carregar_transcricao(caminho="output/transcricao_diarizada.txt"):
    if not os.path.exists(caminho):
        raise FileNotFoundError(f"Arquivo de transcri√ß√£o n√£o encontrado: {caminho}")
    with open(caminho, "r", encoding="utf-8") as f:
        return f.read()

def preparar_contexto(transcricao, metadados):
    contexto = f"""Informa√ß√µes do v√≠deo:
- T√≠tulo: {metadados.get('titulo', 'N/A')}
- Canal: {metadados.get('canal', 'N/A')}
- Data de publica√ß√£o: {metadados.get('data_publicacao', 'N/A')}
- Dura√ß√£o: {metadados.get('duracao_segundos', 0)} segundos
- Visualiza√ß√µes: {metadados.get('visualizacoes', 'N/A')}
- Descri√ß√£o: {metadados.get('descricao', '')}

Transcri√ß√£o completa:
{transcricao}
"""
    return contexto

def perguntar_ao_gemini(metadados, model_id="gemini-1.5-flash"):
    from dotenv import load_dotenv
    load_dotenv()

    api_key = os.getenv("GOOGLE_API_KEY")
    if not api_key:
        print("‚ùå Erro: GOOGLE_API_KEY n√£o definida no arquivo .env")
        return

    genai.configure(api_key=api_key)

    try:
        transcricao = carregar_transcricao()
    except Exception as e:
        print(f"‚ùå Erro ao carregar transcri√ß√£o: {e}")
        return

    contexto = preparar_contexto(transcricao, metadados)
    model = genai.GenerativeModel(model_id)

    print("‚úÖ Pronto para perguntas! Digite 'sair' para encerrar.")
    while True:
        pergunta = input("\nüîé Sua pergunta: ").strip()
        if pergunta.lower() == "sair":
            break
        if not pergunta:
            continue

        prompt = f"{contexto}\n\nAgora, com base nas informa√ß√µes acima, responda:\n{pergunta}"

        try:
            resposta = model.generate_content(prompt)
            print("\nüìò Resposta do Gemini:\n")
            print(resposta.text)
        except Exception as e:
            print(f"‚ö†Ô∏è Erro na consulta ao Gemini: {e}")
